package cn.com.startai.socket.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.startai.socket.mutual.js.bean.CountElectricity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COUNT_ELECTRICITY".
*/
public class CountElectricityDao extends AbstractDao<CountElectricity, Long> {

    public static final String TABLENAME = "COUNT_ELECTRICITY";

    /**
     * Properties of entity CountElectricity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Mac = new Property(1, String.class, "mac", false, "MAC");
        public final static Property Timestamp = new Property(2, long.class, "timestamp", false, "TIMESTAMP");
        public final static Property Complete = new Property(3, int.class, "complete", false, "COMPLETE");
        public final static Property Electricity = new Property(4, byte[].class, "electricity", false, "ELECTRICITY");
    }


    public CountElectricityDao(DaoConfig config) {
        super(config);
    }
    
    public CountElectricityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COUNT_ELECTRICITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MAC\" TEXT," + // 1: mac
                "\"TIMESTAMP\" INTEGER NOT NULL ," + // 2: timestamp
                "\"COMPLETE\" INTEGER NOT NULL ," + // 3: complete
                "\"ELECTRICITY\" BLOB);"); // 4: electricity
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COUNT_ELECTRICITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CountElectricity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(2, mac);
        }
        stmt.bindLong(3, entity.getTimestamp());
        stmt.bindLong(4, entity.getComplete());
 
        byte[] electricity = entity.getElectricity();
        if (electricity != null) {
            stmt.bindBlob(5, electricity);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CountElectricity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(2, mac);
        }
        stmt.bindLong(3, entity.getTimestamp());
        stmt.bindLong(4, entity.getComplete());
 
        byte[] electricity = entity.getElectricity();
        if (electricity != null) {
            stmt.bindBlob(5, electricity);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CountElectricity readEntity(Cursor cursor, int offset) {
        CountElectricity entity = new CountElectricity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mac
            cursor.getLong(offset + 2), // timestamp
            cursor.getInt(offset + 3), // complete
            cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4) // electricity
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CountElectricity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMac(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTimestamp(cursor.getLong(offset + 2));
        entity.setComplete(cursor.getInt(offset + 3));
        entity.setElectricity(cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CountElectricity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CountElectricity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CountElectricity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
